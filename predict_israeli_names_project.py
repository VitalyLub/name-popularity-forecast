# -*- coding: utf-8 -*-
"""predict israeli names project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MFnLiZF7z1p8tlEl4muyAPfSRJ58j5NR

#Installs and imports
"""

import pandas as pd
import numpy as np
from scipy import stats
from time import gmtime, strftime
import itertools
from scipy.stats import linregress
from datetime import datetime

import matplotlib.pyplot as plt
import seaborn as sns
import random

from google.colab import drive
from google.colab import files


def donwload_df(df, file_name):
  now = datetime.now().strftime("%Y%m%d_%H%M%S")
  filename = f'{file_name}_{now}.csv'
  df.to_csv(filename, index=False)
  files.download(filename)

"""#Load data"""

drive.mount('/content/drive')

jew_boys_path = "drive/My Drive/project_names/jew_boys.csv"
jew_girls_path = "drive/My Drive/project_names/jew_girls.csv"

muslim_boys_path = "drive/My Drive/project_names/muslim_boys.csv"
muslim_girls_path = "drive/My Drive/project_names/muslim_girls.csv"

christians_boys_path = "drive/My Drive/project_names/christians_boys.csv"
christians_girls_path = "drive/My Drive/project_names/christians_girls.csv"

druze_boys_path = "drive/My Drive/project_names/druze_boys.csv"
druze_girls_path = "drive/My Drive/project_names/druze_girls.csv"

years_columns = ['1948', '1949', '1950', '1951', '1952',
       '1953', '1954', '1955', '1956', '1957', '1958', '1959', '1960', '1961',
       '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970',
       '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979',
       '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988',
       '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997',
       '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006',
       '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015',
       '2016', '2017', '2018', '2019', '2020', '2021']

def load_df(path_for_df):
  name_of_file = path_for_df.split('/')[-1].replace('.csv', '')
  df = pd.read_csv(path_for_df)
  df = df.replace(',','', regex=True)
  df = pd.concat([df['שם פרטי'].reset_index(drop=True), df.loc[:, df.columns != 'שם פרטי'].apply(pd.to_numeric).reset_index(drop=True)], axis=1)
  numeric_columns = df.select_dtypes(include='number').columns
  df[numeric_columns] = df[numeric_columns].div(df[numeric_columns].sum()) #normalize all numeric columns by its sum
  print(name_of_file, df.shape)
  return df


jew_boys = load_df(jew_boys_path)
jew_girls = load_df(jew_girls_path)
muslim_boys = load_df(muslim_boys_path)
muslim_girls = load_df(muslim_girls_path)
christians_boys = load_df(christians_boys_path)
christians_girls = load_df(christians_girls_path)
druze_boys = load_df(druze_boys_path)
druze_girls = load_df(druze_girls_path)

display(jew_boys.head())

"""#EDA"""

def analyze_df(df):
  print("Ratio of zero values in the df:", (df[years_columns] == 0).sum().sum() / (df[years_columns].shape[0] * df[years_columns].shape[1]))
  df['average'] = df[years_columns].mean(axis=1)
  df['variance'] = df[years_columns].var(axis=1)
  df['max'] = df[years_columns].max(axis=1)
  df['min'] = df[years_columns].min(axis=1)
  df['max_min_ratio'] = df['max'].div(df['min'])
  return df


jew_boys = analyze_df(jew_boys)
jew_girls = analyze_df(jew_girls)
muslim_boys = analyze_df(muslim_boys)
muslim_girls = analyze_df(muslim_girls)
christians_boys = analyze_df(christians_boys)
christians_girls = analyze_df(christians_girls)
druze_boys = analyze_df(druze_boys)
druze_girls = analyze_df(druze_girls)

display(jew_boys.head())

all_dfs = [jew_boys, jew_girls, muslim_boys, muslim_girls, christians_boys, christians_girls, druze_boys, druze_girls]
all_dfs_names_of_df = ['jew_boys', 'jew_girls', 'muslim_boys', 'muslim_girls', 'christians_boys', 'christians_girls', 'druze_boys', 'druze_girls']
all_names_list = []

for df in all_dfs:
  all_names_list.extend(df['שם פרטי'].tolist())


all_names_list = list(set(all_names_list))
print("Count of names", len(all_names_list))

names_count_dfs = dict.fromkeys(all_names_list, 0)

for name in all_names_list:
  for df in all_dfs:
    if name in df['שם פרטי'].tolist():
      names_count_dfs[name] += 1

counter = 0
for name in jew_boys['שם פרטי'].values.tolist():
  if name in jew_girls['שם פרטי'].values.tolist():
    counter += 1
print(counter)
print(counter / len(jew_boys['שם פרטי'].values.tolist()))

def plot_df(df, names_list, plot_title):
  df_to_plot = df[['שם פרטי']+years_columns].reset_index(drop=True)
  df_to_plot = df_to_plot[df_to_plot['שם פרטי'].isin(names_list)]

  # Set the style for the plot
  sns.set(style="whitegrid")

  # Create a new figure
  plt.figure(figsize=(10, 6))

  df_melted = pd.melt(df_to_plot, id_vars=['שם פרטי'], var_name='year', value_name='value')

  for name, group in df_melted.groupby('שם פרטי'):
      plt.plot(group['year'], group['value'], marker='o', label=name[::-1])

  # Adding titles and labels
  plt.title(plot_title, fontsize=16)
  plt.xlabel('Year', fontsize=14)
  plt.xticks(rotation=90, fontsize=8)

  plt.ylabel('Proportion', fontsize=14)

  # Adding a legend
  plt.legend(title='Name', loc='best')

  # Enhancing the x-axis
  plt.xticks(ticks=sorted(df_melted['year'].unique()), labels=sorted(df_melted['year'].unique()))

  # Grid and tight layout for better spacing
  plt.grid(True)
  plt.tight_layout()

  # Show the plot
  plt.show()


plot_df(muslim_boys, ["ג'יהאד", 'יאסר'], 'Name Proportion Over Years by Name For Muslim Males')
plot_df(jew_boys, ['ליאו'], 'Name Proportion Over Years by Name For Jewish Males')
# plot_df(jew_boys, ['ים','יובל','אברהם','דוד','רונן','נהוראי'], 'Name Proportion Over Years by Name For Jewish Males')
# plot_df(jew_girls, ['רחל','יובל','נועה','איריס','תמר','רומי'], 'Name Proportion Over Years by Name For Jewish Females')
# plot_df(jew_girls, ['שיר', 'שירלי', 'שירה'], 'Name Proportion Over Years by Name For Jewish Females')
# plot_df(jew_boys, ['נעם', 'נועם'], 'Name Proportion Over Years by Name For Jewish Males')

def plot_multiple_dfs(dfs, names_list, plot_title, labels):
    # Set the style for the plot
    sns.set(style="whitegrid")

    # Create a new figure
    plt.figure(figsize=(10, 6))

    for df, label in zip(dfs, labels):
        df_to_plot = df[['שם פרטי'] + years_columns].reset_index(drop=True)
        df_to_plot = df_to_plot[df_to_plot['שם פרטי'].isin(names_list)]

        df_melted = pd.melt(df_to_plot, id_vars=['שם פרטי'], var_name='year', value_name='value')

        for name, group in df_melted.groupby('שם פרטי'):
            plt.plot(group['year'], group['value'], marker='o', label=f"{label} ({name[::-1]})")

    # Adding titles and labels
    plt.suptitle(plot_title, fontsize=16)
    plt.title(''.join(names_list)[::-1], fontsize=14)

    plt.xlabel('Year', fontsize=14)
    plt.xticks(rotation=90, fontsize=8)

    plt.ylabel('Proportion', fontsize=14)

    # Adding a legend
    plt.legend(title='Name', loc='upper right')

    # Enhancing the x-axis
    plt.xticks(ticks=sorted(df_melted['year'].unique()), labels=sorted(df_melted['year'].unique()))

    # Grid and tight layout for better spacing
    plt.grid(True)
    plt.tight_layout()

    # Show the plot
    plt.show()

# Example usage with multiple dataframes
plot_multiple_dfs([jew_boys, jew_girls], ['יובל'], 'Name Proportion Over Years by Name For Jewish Males and Females', ['Jew Boys', 'Jew Girls'])
plot_multiple_dfs([jew_boys, jew_girls], ['טל'], 'Name Proportion Over Years by Name For Jewish Boys and Girls', ['Jew Boys', 'Jew Girls'])

"""#Darts imports"""

# Commented out IPython magic to ensure Python compatibility.
!pip install darts
!pip install tensorboard
# %load_ext tensorboard
# %tensorboard --logdir lightning_logs/

from darts import TimeSeries
from darts.models import TiDEModel
from darts.models import ExponentialSmoothing
from darts.datasets import WeatherDataset
from darts.metrics import mse, mae



def series_shape(series):
  print(f"Number of samples: {series.n_samples}") #Number of samples contained in the series.
  print(f"Number of time points: {series.n_timesteps}") #Number of time steps in the series.
  print(f"Number of components: {series.n_components}") #Number of components (dimensions) contained in the series.
  print(series.columns) #Names of columns


def calc_mse_and_mae(test, prediction, to_print=True):
  test_mse = mse(test, prediction)
  median_test_mse = np.median([mse(test[col], prediction[col]) for col in test.columns.tolist()])
  test_mae = mae(test, prediction)
  median_test_mae = np.median([mae(test[col], prediction[col]) for col in test.columns.tolist()])
  if to_print:
    print(f'Test MSE: {test_mse}, Test MAE: {test_mae}')
    print(f'Median Test MSE: {median_test_mse}, Median Test MAE: {median_test_mae}')
  return test_mse, median_test_mse, test_mae, median_test_mae

"""# TiDE

## Run TiDE on one name
"""

name_to_explore = 'איתן'
name_df_a = jew_boys[jew_boys['שם פרטי'] == name_to_explore][years_columns].T
name_df_a['Year'] = name_df_a.index
name_df_a.columns = ['Size', 'Year']
name_df_a = name_df_a[['Year', 'Size']]
name_df_a['Name'] = name_to_explore
display(name_df_a)

series = TimeSeries.from_dataframe(name_df_a, time_col="Year",value_cols="Size")
series_shape(series)

prediction_window_length = 7
train_test_split_year = series.n_timesteps - prediction_window_length

train = series[:train_test_split_year]
test = series[train_test_split_year:]

one_name_model = TiDEModel(
    input_chunk_length=10,
    output_chunk_length=prediction_window_length,
    n_epochs=500,
    log_tensorboard=True
)

print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
one_name_model.fit(train)
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))

prediction = one_name_model.predict(prediction_window_length)

train.plot(label="train")
test.plot(label="test")
prediction.plot(label="forecast", alpha=0.5)
plt.title(name_to_explore[::-1])
plt.legend()

test_mse = mse(test, prediction)
test_mae = mae(test, prediction)
print(f'Test MSE: {test_mse}, Test MAE: {test_mae}')

# Commented out IPython magic to ensure Python compatibility.
#  %tensorboard --logdir /content/darts_logs/2024-09-14_16_39_57_torch_model_run_717/logs

"""# Find number of epoch before overfit"""

#prep data
names = jew_boys['שם פרטי'].unique().tolist() #random.sample(jew_boys['שם פרטי'].unique().tolist(), 500)

df_list = []
for name in names:
    freq_column_name = f'freq_of_{name}_in_jewish_boys'
    name_df = jew_boys[jew_boys['שם פרטי'] == name][years_columns].T
    name_df['Year'] = name_df.index
    name_df.columns = [freq_column_name, 'Year']
    name_df['Name'] = name
    df_list.append(name_df[['Year', freq_column_name, 'Name']])
series = []
for df in df_list:
    series.append(TimeSeries.from_dataframe(df, 'Year', df.columns[1]))
combined_series = series[0].stack(series[1])
for i in range(2, len(series)):
    combined_series = combined_series.stack(series[i])

years_in_val_set = 25
prediction_window_length = 7
train_test_split = combined_series.n_timesteps - years_in_val_set
print(train_test_split)
train = combined_series[:train_test_split]
test = combined_series[train_test_split:]

small_model = TiDEModel(
    input_chunk_length = 7,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 1,
    num_decoder_layers = 1,
    hidden_size = 128,
    temporal_decoder_hidden = 32,
    n_epochs = 20,
    log_tensorboard=True
)





print("small")
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
small_model.fit(train, val_series = test)
prediction = small_model.predict(prediction_window_length)
test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction)

# Commented out IPython magic to ensure Python compatibility.
#  %tensorboard --logdir /content/darts_logs/2024-09-14_17_58_48_torch_model_run_717/logs

medium_model = TiDEModel(
    input_chunk_length = 11,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 2,
    num_decoder_layers = 2,
    hidden_size = 256,
    temporal_decoder_hidden = 64,
    n_epochs = 20,
    log_tensorboard=True
)
print("medium")
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
medium_model.fit(train, val_series = test)
prediction = medium_model.predict(prediction_window_length)
test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction)
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))

# Commented out IPython magic to ensure Python compatibility.
#  %tensorboard --logdir /content/darts_logs/2024-09-14_17_08_27_torch_model_run_717/logs

large_model = TiDEModel(
    input_chunk_length = 15,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 4,
    num_decoder_layers = 4,
    hidden_size = 512,
    temporal_decoder_hidden = 128,
    n_epochs = 20,
    log_tensorboard=True
)
print("large")
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
large_model.fit(train, val_series = test)
prediction = large_model.predict(prediction_window_length)
test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction)
print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))

# Commented out IPython magic to ensure Python compatibility.
#  %tensorboard --logdir /content/darts_logs/2024-09-14_17_09_16_torch_model_run_717/logs

"""# Run the experiment for jewish males and jewish females as covaraites"""

def plot_plot_of_two_dataframes(df1, df1_name, df2, df2_name, column_name, xlabel, ylabel, plot_title):
  plt.figure(figsize=(10,6))

  plt.hist(df1[column_name], bins=20, alpha=0.5, label=df1_name)
  plt.hist(df2[column_name], bins=20, alpha=0.5, label=df2_name)

  plt.xlabel(xlabel)
  plt.ylabel(ylabel)
  plt.title(plot_title)
  plt.legend()

  # Show plot
  plt.show()


#prep data
names = jew_boys['שם פרטי'].unique().tolist() #random.sample(jew_boys['שם פרטי'].unique().tolist(), 500)
cov_names = jew_girls['שם פרטי'].unique().tolist()

df_list = []
cov_df_list = []
counter = 0
for name in names:
    freq_column_name = f'freq_of_{name}_in_jewish_boys'
    name_df = jew_boys[jew_boys['שם פרטי'] == name][years_columns].T
    name_df['Year'] = name_df.index
    name_df.columns = [freq_column_name, 'Year']
    name_df['Name'] = name
    df_list.append(name_df[['Year', freq_column_name, 'Name']])
    if name in cov_names:
      counter += 1
      freq_column_name = f'freq_of_{name}_in_jewish_girls'
      name_df = jew_girls[jew_girls['שם פרטי'] == name][years_columns].T
      name_df['Year'] = name_df.index
      name_df.columns = [freq_column_name, 'Year']
      name_df['Name'] = name
      cov_df_list.append(name_df[['Year', freq_column_name, 'Name']])
    else:
      freq_column_name = f'freq_of_{name}_in_jewish_girls'
      name_df.columns = [freq_column_name, 'Year', 'Name']
      name_df[freq_column_name] = 0
      cov_df_list.append(name_df[['Year', freq_column_name, 'Name']])
print(f'{counter} matches out of {len(names)} names')
series = []
for df in df_list:
    series.append(TimeSeries.from_dataframe(df, 'Year', df.columns[1]))

combined_series = series[0].stack(series[1])
for i in range(2, len(series)):
    combined_series = combined_series.stack(series[i])

cov_series = []
for df in cov_df_list:
    cov_series.append(TimeSeries.from_dataframe(df, 'Year', df.columns[1]))

cov_combined_series = cov_series[0].stack(cov_series[1])
for i in range(2, len(cov_series)):
    cov_combined_series = cov_combined_series.stack(series[i])


years_in_val_set = 7
prediction_window_length = 7
train_test_split = combined_series.n_timesteps - years_in_val_set
train = combined_series[:train_test_split]
test = combined_series[train_test_split:]
cov_train = cov_combined_series[:train_test_split]
cov_test = cov_combined_series[train_test_split:]

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  small_model = TiDEModel(
    input_chunk_length = 7,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 1,
    num_decoder_layers = 1,
    hidden_size = 128,
    temporal_decoder_hidden = 32,
    n_epochs = 20)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  small_model.fit(train)
  prediction = small_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  small_model_with_cov = TiDEModel(
    input_chunk_length = 7,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 1,
    num_decoder_layers = 1,
    hidden_size = 128,
    temporal_decoder_hidden = 32,
    n_epochs = 20)
  small_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = small_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Small Model Expierment Results')

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  medium_model = TiDEModel(
    input_chunk_length = 11,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 2,
    num_decoder_layers = 2,
    hidden_size = 256,
    temporal_decoder_hidden = 64,
    n_epochs = 20,)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  medium_model.fit(train)
  prediction = medium_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  medium_model_with_cov = TiDEModel(
    input_chunk_length = 11,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 2,
    num_decoder_layers = 2,
    hidden_size = 256,
    temporal_decoder_hidden = 64,
    n_epochs = 20,)
  medium_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = medium_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Medium Model Expierment Results')

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  large_model = TiDEModel(
    input_chunk_length = 15,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 4,
    num_decoder_layers = 4,
    hidden_size = 512,
    temporal_decoder_hidden = 128,
    n_epochs = 20,)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  large_model.fit(train)
  prediction = large_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  large_model_with_cov = TiDEModel(
    input_chunk_length = 15,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 4,
    num_decoder_layers = 4,
    hidden_size = 512,
    temporal_decoder_hidden = 128,
    n_epochs = 20,)
  large_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = large_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Large Model Expierment Results')

"""# Run the experiment for jewish females with jewish males as covaraites"""

def plot_plot_of_two_dataframes(df1, df1_name, df2, df2_name, column_name, xlabel, ylabel, plot_title):
  plt.figure(figsize=(10,6))

  plt.hist(df1[column_name], bins=20, alpha=0.5, label=df1_name)
  plt.hist(df2[column_name], bins=20, alpha=0.5, label=df2_name)

  plt.xlabel(xlabel)
  plt.ylabel(ylabel)
  plt.title(plot_title)
  plt.legend()

  # Show plot
  plt.show()


#prep data
names = jew_girls['שם פרטי'].unique().tolist()
cov_names = jew_boys['שם פרטי'].unique().tolist()

df_list = []
cov_df_list = []
counter = 0
for name in names:
    freq_column_name = f'freq_of_{name}_in_jewish_girls'
    name_df = jew_girls[jew_girls['שם פרטי'] == name][years_columns].T
    name_df['Year'] = name_df.index
    name_df.columns = [freq_column_name, 'Year']
    name_df['Name'] = name
    df_list.append(name_df[['Year', freq_column_name, 'Name']])
    if name in cov_names:
      counter += 1
      freq_column_name = f'freq_of_{name}_in_jewish_boys'
      name_df = jew_boys[jew_boys['שם פרטי'] == name][years_columns].T
      name_df['Year'] = name_df.index
      name_df.columns = [freq_column_name, 'Year']
      name_df['Name'] = name
      cov_df_list.append(name_df[['Year', freq_column_name, 'Name']])
    else:
      freq_column_name = f'freq_of_{name}_in_jewish_boys'
      name_df.columns = [freq_column_name, 'Year', 'Name']
      name_df[freq_column_name] = 0
      cov_df_list.append(name_df[['Year', freq_column_name, 'Name']])
print(f'{counter} matches out of {len(names)} names')
series = []
for df in df_list:
    series.append(TimeSeries.from_dataframe(df, 'Year', df.columns[1]))

combined_series = series[0].stack(series[1])
for i in range(2, len(series)):
    combined_series = combined_series.stack(series[i])

cov_series = []
for df in cov_df_list:
    cov_series.append(TimeSeries.from_dataframe(df, 'Year', df.columns[1]))

cov_combined_series = cov_series[0].stack(cov_series[1])
for i in range(2, len(cov_series)):
    cov_combined_series = cov_combined_series.stack(series[i])


years_in_val_set = 7
prediction_window_length = 7
train_test_split = combined_series.n_timesteps - years_in_val_set
train = combined_series[:train_test_split]
test = combined_series[train_test_split:]
cov_train = cov_combined_series[:train_test_split]
cov_test = cov_combined_series[train_test_split:]

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  small_model = TiDEModel(
    input_chunk_length = 7,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 1,
    num_decoder_layers = 1,
    hidden_size = 128,
    temporal_decoder_hidden = 32,
    n_epochs = 20)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  small_model.fit(train)
  prediction = small_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  small_model_with_cov = TiDEModel(
    input_chunk_length = 7,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 1,
    num_decoder_layers = 1,
    hidden_size = 128,
    temporal_decoder_hidden = 32,
    n_epochs = 20)
  small_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = small_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Small Model Expierment Results')

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  medium_model = TiDEModel(
    input_chunk_length = 11,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 2,
    num_decoder_layers = 2,
    hidden_size = 256,
    temporal_decoder_hidden = 64,
    n_epochs = 20,)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  medium_model.fit(train)
  prediction = medium_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  medium_model_with_cov = TiDEModel(
    input_chunk_length = 11,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 2,
    num_decoder_layers = 2,
    hidden_size = 256,
    temporal_decoder_hidden = 64,
    n_epochs = 20,)
  medium_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = medium_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Medium Model Expierment Results')

amount_of_expierments = 50
without_covs = []
with_covs = []
for i in range(amount_of_expierments):
  print(f'Experiment {i + 1} out of {amount_of_expierments}')
  large_model = TiDEModel(
    input_chunk_length = 15,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 4,
    num_decoder_layers = 4,
    hidden_size = 512,
    temporal_decoder_hidden = 128,
    n_epochs = 20,)

  print(strftime("%Y-%m-%d %H:%M:%S", gmtime()))
  large_model.fit(train)
  prediction = large_model.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  without_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

  large_model_with_cov = TiDEModel(
    input_chunk_length = 15,
    output_chunk_length = prediction_window_length,
    num_encoder_layers = 4,
    num_decoder_layers = 4,
    hidden_size = 512,
    temporal_decoder_hidden = 128,
    n_epochs = 20,)
  large_model_with_cov.fit(train, past_covariates=cov_train)
  prediction = large_model_with_cov.predict(prediction_window_length)
  test_mse, median_test_mse, test_mae, median_test_mae = calc_mse_and_mae(test, prediction, False)
  with_covs.append([test_mse, median_test_mse, test_mae, median_test_mae])

without_covs = pd.DataFrame(without_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])
with_covs = pd.DataFrame(with_covs, columns=['test_mse', 'median_test_mse', 'test_mae', 'median_test_mae'])

print('without', without_covs['test_mse'].mean(), without_covs['test_mse'].std())
print('with', with_covs['test_mse'].mean(), with_covs['test_mse'].std())
t_stat, p_value = stats.ttest_ind(without_covs['test_mse'], with_covs['test_mse'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

plot_plot_of_two_dataframes(without_covs,
                            'without covariates',
                            with_covs,
                            'with covariates',
                            'test_mse',
                            'Test mse scores',
                            'Frequency',
                            'Large Model Expierment Results')